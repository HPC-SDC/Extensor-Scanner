module SparseMatrixTree (
    input wire clk,  // ????
    input wire rst,  // ????

    output reg [15:0] tree_row[0:14],  // ??????
    output reg [15:0] tree_col[0:14],  // ??????
    output reg [15:0] tree_data[0:14]  // ??????
);

// ?????? A
reg [7:0] A_data[0:15];  // ?????
reg [3:0] A_row[0:15];   // ??????
reg [3:0] A_col[0:15];   // ??????

reg [7:0] A_data1[0:15];  // ?????
reg [3:0] A_row1[0:15];   // ??????
reg [3:0] A_col1[0:15];   // ??????


integer i;  

initial begin


    A_data[0] = 8'b00000001; A_row[0] = 4'd0; A_col[0] = 4'd1;
    A_data[1] = 8'b00000010; A_row[1] = 4'd0; A_col[1] = 4'd2;
    A_data[2] = 8'b00000011; A_row[2] = 4'd1; A_col[2] = 4'd0;
    A_data[3] = 8'b00000100; A_row[3] = 4'd1; A_col[3] = 4'd1;
    A_data[4] = 8'b00000101; A_row[4] = 4'd1; A_col[4] = 4'd2;

end

always @ (posedge clk or posedge rst) begin


        for (i = 0; i < 15; i = i + 1) begin
            if (A_data[i] != 8'b0) begin
         
                tree_row[i] <= A_row[i];
                tree_col[i] <= A_col[i];
                tree_data[i] <= A_data[i];
            end
        end
    
end

endmodule
